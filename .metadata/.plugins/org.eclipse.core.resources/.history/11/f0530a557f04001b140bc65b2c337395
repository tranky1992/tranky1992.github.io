package com.bookstore.dao;

import static org.junit.Assert.*;
import static org.junit.Assume.assumeTrue;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.PersistenceException;

import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.bookstore.entity.Users;

public class UserDAOTest {
	
	private static EntityManagerFactory entityManagerFactory;
	private static EntityManager entityManager;
	private static UserDAO userDAO;

	@BeforeClass

	public static void setUpClass() {
		entityManagerFactory = Persistence.createEntityManagerFactory("BookStoreWebsite");
		entityManager = entityManagerFactory.createEntityManager();
		userDAO = new UserDAO(entityManager);

	}

	@Test
	public void testCreateUsers() {
		Users user1 = new Users();
		user1.setEmail("minhha@gmail.com");
		user1.setPassword("123456");
		user1.setFullName("Tran Minh Ha");

		user1 = userDAO.create(user1);
		assertTrue(user1.getUserId() > 0);

	}

	@Test(expected = PersistenceException.class)
	public void testCreateUsersFieldsNotSet() {
		Users user1 = new Users();
		user1 = userDAO.create(user1);
		

	}
	@Test
	public void testUpdateUsers() {
		Users user = new Users();
		user.setUserId(22);
		user.setEmail("david@gmail.com");
		user.setFullName("David Backham");
		user.setPassword("HelloWorld");
		user = userDAO.update(user);
		String expected = "HelloWorld";
		String actual = user.getPassword();
		assertEquals(expected, actual);
	} 
	@Test
	public void testGetUsersFound() {
		Integer userId = 19;
		Users user = userDAO.get(userId);
		if (user !=null) {
			System.out.println(user.getEmail());
		}
		assertNotNull(user);
	}
	@Test
	public void testGetUsersNotFound() {
		Integer userId = 1;
		Users user = userDAO.get(userId);
		if (user == null) {
			System.out.println("No User");
		}
		assertNull(user);
	}
	@Test
	public void testDeleteUsers () {
		Integer userId = 19;
		userDAO.delete(userId);
		Users user = userDAO.get(userId);
		if (user == null) {
			System.out.println("Delete User");
		}
		assertNull(user);
	}
	@AfterClass
	public static void tearDowbClass() {
		entityManager.close();
		entityManagerFactory.close();
		
	}
}
